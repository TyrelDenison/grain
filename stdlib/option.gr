# Standard library for option functionality

export *

let isSome = (option) => {
  match (option) {
    | Some(_) => true
    | None => false
  }
}

let isNone = (option) => {
  match (option) {
    | None => true
    | Some(_) => false
  }
}

let contains = (val, option) => {
  match (option) {
    | Some(x) => x == val
    | None => false
  }
}

let expect = (msg, option) => {
  match (option) {
    | Some(x) => x
    | None => fail msg
  }
}

let unwrap = (option) => {
  expect('Could not unwrap None value', option)
}

let unwrapWithDefault = (default, option) => {
  match (option) {
    | Some(x) => x
    | None => default
  }
}

let map = (fn, option) => {
  match (option) {
    | Some(x) => Some(fn(x))
    | None => None
  }
}

let mapWithDefault = (default, fn, option) => {
  match (option) {
    | Some(x) => fn(x)
    | None => default
  }
}

let flatMap = (fn, option) => {
  match (option) {
    | Some(x) => fn(x)
    | None => None
  }
}

let filter = (pred, option) => {
  match (option) {
    | Some(x) =>
      if (pred(x)) {
        Some(x)
      } else {
        None
      }
    | None => None
  }
}

let zip = (optionA, optionB) => {
  match ((optionA, optionB)) {
    | (Some(a), Some(b)) => Some((a, b))
    | _ => None
  }
}

let zipWith = (fn, optionA, optionB) => {
  match ((optionA, optionB)) {
    | (Some(a), Some(b)) => Some(fn(a, b))
    | _ => None
  }
}

let flatten = (option) => {
  match (option) {
    | Some(Some(x)) => Some(x)
    | _ => None
  }
}

let toList = (option) => {
  match (option) {
    | Some(x) => [x]
    | None => []
  }
}

let toArray = (option) => {
  match (option) {
    | Some(x) => [> x]
    | None => [>]
  }
}

let sideEffect = (fn, option) => {
  match (option) {
    | Some(x) => fn(x)
    | None => void
  }
}

let peek = (fn, option) => {
  sideEffect(fn, option)
  option
}
